#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function
from subprocess import Popen, PIPE, STDOUT
import os
import subprocess
import sys
import yaml


executable = os.path.abspath(sys.argv.pop(0))
version = "0.0.0"


def print_usage():
    print("tiny-sandbox " + version + " Â© Tobe Osakwe")
    print("usage: tsbox <create|destroy|mount|run|shell>")
    print("Type \"tsbox <command> --help\" to get help for a specific command.")


def get_username():
    username = sys.argv[0]
    config_file = ".tsbox/users/" + username + ".yaml"
    return username, config_file


def invalid_usage():
    return (not sys.argv) or (sys.argv[0] == "--help") or (sys.argv[0] == "-h")


def deltree(target):
    try:
        if os.path.isdir(target):
            for d in os.listdir(target):
                deltree(os.path.join(target, d))
            os.rmdir(target)
        elif os.path.exists(target):
            os.remove(target)
    except OSError:
        return

def get_mounts(mount, username, chroot_dir, rw=False, unmount=False):
    if mount:
        for i in range(0, len(mount)):
            if isinstance(mount[i], dict):
                mount_from = mount[i].keys()[0]
                mount_to = mount[i][mount_from]
            else:
                mount_from = str(mount[i])
                mount_to = mount_from
            mount_to = chroot_dir + "/" + mount_to
            mount_to = os.path.normpath(mount_to)
            if not os.path.exists(mount_to):
                os.makedirs(mount_to)
            is_mp = not (subprocess.call(["mountpoint", "-q", mount_to]))
            if (not unmount) and (not is_mp):
                # mount -o bind,ro foo foo
                if rw:
                    bind_type = "bind"
                else:
                    bind_type = "bind,ro"
                subprocess.call(
                    ["mount", "-o", bind_type, mount_from, mount_to])
                print("mounted " + mount_from + " at " + mount_to)
            elif unmount and is_mp:
                subprocess.call(
                    ["umount", "-lfv", mount_to])


if invalid_usage():
    print_usage()
    sys.exit(64)
elif sys.argv[0] == "create":
    sys.argv.pop(0)
    if invalid_usage():
        print("usage: tsbox create <name>")
    else:
        username, config_file = get_username()
        config_dir = os.path.dirname(config_file)
        if not os.path.exists(config_dir):
            os.makedirs(config_dir)
        with open(config_file, "w") as file:
            config = {
                'env': {},
                'network': {'share': False},
                'persistent': False,
                'mount': [
                    '/bin',
                    '/usr/bin',
                    '/usr/local/bin',
                    '/usr/lib',
                    '/lib',
                    '/lib64',
                    '/dev'
                ]
            }
            yaml.dump(config, file)
        subprocess.call(
            ["sudo", "useradd", "-M", "--shell=/bin/false", username])
        subprocess.call(["sudo", "usermod", "-L", username])
elif sys.argv[0] == "mount":
    sys.argv.pop(0)
    if invalid_usage():
        print("usage: tsbox mount <name>")
    else:
        username, config_file = get_username()
        chroot_dir = ".tsbox/chroots/" + username
        home_dir = os.path.join(chroot_dir, "home", username)
        if not os.path.exists(home_dir):
            os.makedirs(home_dir)
        with open(config_file, "r") as file:
            config = yaml.safe_load(file)
        get_mounts(config.get('mount', []), username, chroot_dir)
        get_mounts(config.get('mount_rw', []), username, chroot_dir, rw=True)
        cgroup_dir = "/sys/fs/cgroup/memory/" + username
        mem_limit_file = cgroup_dir + "/memory.limit_in_bytes"
        swappiness_file = cgroup_dir + "/memory.swappiness"
        subprocess.call(["sudo", "chown", "-R", username + ":" + username, home_dir])
        if not os.path.exists(cgroup_dir):
            os.makedirs(cgroup_dir)
        if not os.path.exists(swappiness_file):
            with open(swappiness_file, "w") as file:
                file.write("0")
        with open(mem_limit_file, "w") as file:
            # 128MB default
            file.write(str(config.get('memory_limit', 128000000)))
elif sys.argv[0] == "run":
    sys.argv.pop(0)
    if invalid_usage():
        print("usage: tsbox run <name> <command> [command-args...]")
    else:
        username, config_file = get_username()
        sys.argv.pop(0)
        if os.path.exists(config_file):
            with open(config_file, "r") as file:
                config = yaml.safe_load(file)
        else:
            config = {}
        chroot_dir = ".tsbox/chroots/" + username
        network = config.get('network', {})
        proc = ["sudo"]
        if not network.get('share', False):
            proc.extend(["unshare", "-n"])
        proc.extend([
            "env",
            "-i",
            "/bin/bash",
            os.path.join(os.path.dirname(executable), "tsbox-shell"),
            username,
            "LOOPBACK-ON" if network.get('share', False) else "LOOPBACK-OFF"
        ])
        proc.extend(sys.argv)
        p = Popen(proc, env=config.get('env', {}))
        exit(p.wait())
elif sys.argv[0] == "shell":
    sys.argv.pop(0)
    if invalid_usage():
        print("usage: tsbox shell <name>")
    else:
        username = sys.argv[0]
        p = Popen([executable, "run", username, "/bin/bash", "-i"])
        exit(p.wait())
elif sys.argv[0] == "destroy":
    sys.argv.pop(0)
    if invalid_usage():
        print("usage: tsbox destroy <name>")
    else:
        username, config_file = get_username()
        chroot_dir = ".tsbox/chroots/" + username
        cgroup_dir = "/sys/fs/cgroup/memory/" + username
        config_dir = os.path.dirname(config_file)
        if os.path.exists(config_file):
            with open(config_file, "r") as file:
                config = yaml.safe_load(file)
        else:
            config = {}
        get_mounts(config.get('mount', []), username, chroot_dir, unmount=True)
        get_mounts(config.get('mount_rw', []),
                   username, chroot_dir, unmount=True)
        if os.path.exists(config_file):
            os.remove(config_file)
        if os.path.exists(chroot_dir):
            deltree(chroot_dir)
        if os.path.exists(cgroup_dir):
            deltree(cgroup_dir)
        subprocess.call(["sudo", "userdel", username])
else:
    print_usage()
    sys.exit(64)
